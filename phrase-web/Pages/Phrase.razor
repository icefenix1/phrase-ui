@page "/Phrase"
@using phrase_web.Models
@inject HttpClient Http
@inject IConfiguration Configuration

<h3>Phrase</h3>

<div class="form-group">
    <label for="dropdown">Select Option:</label>
    <select id="dropdown" class="form-control" @bind="selectedOption" >
        @foreach (var part in parts)
        {
            <option value="@part">@part</option>
        }
    </select>
</div>

<div class="form-group">
    <label for="textBox">Enter Text:</label>
     <input type="text" class="form-control" id="textBox" @bind="enteredText" @oninput="SearchEntered"/>
    <div class="list-group">
        @foreach (var part in searchResults)
        {
            <button type="button" class="list-group-item list-group-item-action" @onclick="(e => AddWord(e, part))">
                @part
            </button>
        }
    </div>
</div>

<div class="form-group">
    <label for="tagList">Word List:</label>
    <ul class="nav nav-pills">
        @{
            for (var i = 0; i < tags.Count; i++)
            {
                var j = i;
                
                    <li class="nav-item" style="padding-right:10px">
                        <span class="nav-link active">@tags[i]                        
                        <button type="button" class="btn btn-secondary btn-xs close" id="@i" aria-label="Close" @onclick="() => RemoveWord(j)">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </span>
                    </li>
            }
        }
    </ul>
</div>

@code {
    private string selectedOption { get; set; } = "";
    private string enteredText { get; set; } = "";
    private List<string> tags { get; set; } = new List<string>();
    private List<string> parts { get; set; } = new List<string>();
    private List<string> searchResults { get; set; } = new List<string>();
    private string apiPath { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        apiPath = Configuration["PhraseApi:Endpoint"] ?? "";
        var partsResults = await Http.GetAsync(apiPath);
        var toClean = partsResults.Content.ReadAsStringAsync().Result.TrimStart('[').TrimEnd(']').Split(',').ToList();
        foreach (var part in toClean)
        {
            parts.Add(part.Trim('\"').ToLower());
        };
        selectedOption = parts[0];
    }

    private async Task AddWord(MouseEventArgs eventArgs, string word)
    {
        tags.Add(word);
        enteredText = "";
        searchResults = new List<string>();
    }

    private async Task SearchEntered(ChangeEventArgs searchRequest)
    {
        var data = new List<string>();
        var response = await Http.GetAsync($"{apiPath}{selectedOption}/{searchRequest.Value}");
        var toClean = response.Content.ReadAsStringAsync().Result.TrimStart('[').TrimEnd(']').Split(',').ToList();
        foreach (var part in toClean)
        {
            data.Add(part.Trim('\"').ToLower());
        };
        searchResults = data;
    }

private void RemoveWord(int id) => tags.RemoveAt(id);
}
