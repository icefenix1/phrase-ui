@page "/Phrase"
@inject HttpClient Http

<h3>Phrase</h3>

<div class="form-group">
    <label for="dropdown">Select Option:</label>
    <select id="dropdown" class="form-control" @bind="selectedOption">
        <option value="">Select an option</option>
        @foreach (var part in parts)
        {
            <option value="@part">@part</option>
        }
    </select>
</div>

<div class="form-group">
    <label for="textBox">Enter Text:</label>
    <AutoComplete bind-Value="enteredText"
                  TItem="string"
                  DataProvider="SearchEntered"
                  PropertyName="CustomerName"
                  Placeholder="Search for a word..."
                  OnChanged="AddWord" />
</div>

<div class="form-group">
    <label for="tagList">Word List:</label>
    <div>
        @{
            for (var i = 0; i < tags.Count; i++)
            {
                var j = i;
                <div class="card" style="width: fit-content;float: left">
                    <div class="card-header">
                        <button type="button" id="@i" class="close" aria-label="Close" @onclick="() => RemoveWord(j)">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@tags[i]</p>
                    </div>
                </div>
            }
        }
    </div>

</div>

@code {
    private string selectedOption { get; set; } = "Select an option";
    private string enteredText { get; set; } = "";
    private List<string> tags { get; set; } = new List<string>();
    private List<string> parts { get; set; } = new List<string>();
    private List<string> searchResults { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var partsResults = await Http.GetAsync("https://localhost:51968/api/Words");
        var toClean = partsResults.Content.ReadAsStringAsync().Result.TrimStart('[').TrimEnd(']').Split(',').ToList();
        foreach (var part in toClean)
        {
            parts.Add(part.Trim('\"').ToLower());
        };
    }

    private void AddWord()
    {
        tags.Add(enteredText);
        enteredText = "";
        searchResults = new List<string>();
    }

    private async Task<AutoCompleteDataProviderResult<string>> SearchEntered(AutoCompleteDataProviderRequest<string> searchRequest)
    {
        var data = new List<string>();
        var sr = new AutoCompleteDataProviderResult<string>();
        if (selectedOption != "Select an option")
        {
            
            var response = await Http.GetAsync($"https://localhost:51968/api/Words/{selectedOption}/{searchRequest.Filter.Value}");
            var toClean = response.Content.ReadAsStringAsync().Result.TrimStart('[').TrimEnd(']').Split(',').ToList();
            foreach (var part in toClean)
            {
                data.Add(part.Trim('\"').ToLower());
            };
        }
        return new AutoCompleteDataProviderResult<string> { Data = data, TotalCount = data.Count() };
    }

private void RemoveWord(int id) => tags.RemoveAt(id);
}
